package main

import "fmt"

import "time"

import "math"


func main () {

/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

*/
	fibonacci := []int{1,2}

	for sum := 3; sum <= 4000000; sum = sum + fibonacci[len(fibonacci) - 2] {
		fibonacci = append(fibonacci, sum)	
	}

	sum_evens := 0
	for _,element := range fibonacci {
		if element % 2 == 0 {
			sum_evens += element
		}
	}
	fmt.Println("2 sum of even fibonacci numbers < 4 million:", sum_evens)


/*
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
*/

	maxNum := 0
	t := time.Now()

	for i := int(math.Sqrt(600851475143)); i > 0; i-= 1 {

		if 600851475143 % i == 0 {
			if checkPrime(i) {
				maxNum = i
				break
			}
		}
	}
	fmt.Println("End Time"," :", time.Since(t))

	fmt.Println(maxNum)


}


func checkPrime(num int) bool{
	//math is hard
	isPrime := true
	if num % 3 == 0 || num % 5 == 0 {
		isPrime = false
		return isPrime
	}
	
	for n := num/2 ; n > 1; n-- {
		if num % n != 0 {
			isPrime = true
		}else {
			isPrime = false
			break
		}
	}
	return isPrime
}